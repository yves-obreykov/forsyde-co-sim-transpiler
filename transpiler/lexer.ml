# 3 "lexer.mll"
 
open Lexing
open Parser

exception SyntaxError of string

let incr_lineno lexbuf =
  let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <- 
    { 
      pos with
        pos_lnum = pos.pos_lnum + 1;
        pos_bol = pos.pos_cnum;
    }

# 18 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\235\255\236\255\237\255\238\255\239\255\240\255\241\255\
    \242\255\243\255\244\255\245\255\249\255\024\000\025\000\006\000\
    \080\000\090\000\001\000\001\000\003\000\139\000\038\000\036\000\
    \040\000\001\000\255\255\041\000\044\000\004\000\254\255\040\000\
    \039\000\005\000\253\255\251\255\041\000\041\000\057\000\050\000\
    \057\000\047\000\065\000\051\000\060\000\248\255\051\000\050\000\
    \066\000\048\000\247\255\066\000\069\000\246\255\004\000\245\255\
    \138\000\126\000\255\255\248\255\249\255\250\255\251\255\252\255\
    \253\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\006\000\006\000\006\000\
    \005\000\019\000\004\000\004\000\003\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \008\000\009\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\056\000\000\000\
    \056\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\018\000\035\000\020\000\019\000\035\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\026\000\011\000\020\000\030\000\034\000\058\000\000\000\
    \006\000\005\000\000\000\000\000\003\000\017\000\000\000\000\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\008\000\000\000\007\000\000\000\012\000\
    \057\000\012\000\012\000\012\000\012\000\013\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\015\000\012\000\012\000\014\000\012\000\
    \012\000\012\000\012\000\010\000\051\000\009\000\046\000\036\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\020\000\031\000\027\000\025\000\
    \028\000\029\000\032\000\033\000\037\000\038\000\039\000\040\000\
    \041\000\042\000\043\000\044\000\045\000\047\000\048\000\049\000\
    \050\000\052\000\053\000\020\000\255\255\065\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\064\000\000\000\000\000\000\000\000\000\000\000\
    \063\000\000\000\000\000\000\000\062\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\061\000\000\000\000\000\000\000\
    \060\000\023\000\059\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\022\000\000\000\000\000\000\000\024\000\
    \001\000\000\000\000\000\000\000\055\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\019\000\020\000\000\000\018\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\025\000\000\000\020\000\029\000\033\000\054\000\255\255\
    \000\000\000\000\255\255\255\255\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \054\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\013\000\000\000\014\000\015\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\021\000\022\000\023\000\024\000\
    \027\000\028\000\031\000\032\000\036\000\037\000\038\000\039\000\
    \040\000\041\000\042\000\043\000\044\000\046\000\047\000\048\000\
    \049\000\051\000\052\000\021\000\056\000\057\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\057\000\255\255\255\255\255\255\255\255\255\255\
    \057\000\255\255\255\255\255\255\057\000\255\255\056\000\255\255\
    \255\255\255\255\255\255\255\255\057\000\255\255\255\255\255\255\
    \057\000\021\000\057\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\021\000\255\255\255\255\255\255\021\000\
    \000\000\255\255\255\255\255\255\054\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\056\000\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec read lexbuf =
   __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 34 "lexer.mll"
               (TO)
# 173 "lexer.ml"

  | 1 ->
# 35 "lexer.mll"
               (FROM)
# 178 "lexer.ml"

  | 2 ->
# 36 "lexer.mll"
               (PORT)
# 183 "lexer.ml"

  | 3 ->
# 37 "lexer.mll"
             ( read lexbuf )
# 188 "lexer.ml"

  | 4 ->
# 38 "lexer.mll"
             ( incr_lineno lexbuf; read lexbuf )
# 193 "lexer.ml"

  | 5 ->
# 39 "lexer.mll"
             ( INT (int_of_string (Lexing.lexeme lexbuf)) )
# 198 "lexer.ml"

  | 6 ->
# 40 "lexer.mll"
             ( CHAR (Lexing.lexeme lexbuf).[0] )
# 203 "lexer.ml"

  | 7 ->
# 41 "lexer.mll"
                  (SYSTEMGRAPH)
# 208 "lexer.ml"

  | 8 ->
# 42 "lexer.mll"
             (VERTEX)
# 213 "lexer.ml"

  | 9 ->
# 43 "lexer.mll"
             (EDGE)
# 218 "lexer.ml"

  | 10 ->
# 44 "lexer.mll"
             ( read_string (Buffer.create 17) lexbuf )
# 223 "lexer.ml"

  | 11 ->
# 45 "lexer.mll"
             ( LEFT_BRACE )
# 228 "lexer.ml"

  | 12 ->
# 46 "lexer.mll"
             ( RIGHT_BRACE )
# 233 "lexer.ml"

  | 13 ->
# 47 "lexer.mll"
             ( LEFT_BRACK )
# 238 "lexer.ml"

  | 14 ->
# 48 "lexer.mll"
             ( RIGHT_BRACK )
# 243 "lexer.ml"

  | 15 ->
# 49 "lexer.mll"
             ( LEFT_PAREN )
# 248 "lexer.ml"

  | 16 ->
# 50 "lexer.mll"
             ( RIGHT_PAREN )
# 253 "lexer.ml"

  | 17 ->
# 51 "lexer.mll"
             ( COLON )
# 258 "lexer.ml"

  | 18 ->
# 52 "lexer.mll"
             ( COMMA )
# 263 "lexer.ml"

  | 19 ->
# 53 "lexer.mll"
      ( raise (SyntaxError ("Unexpected char: " ^ Lexing.lexeme lexbuf)) )
# 268 "lexer.ml"

  | 20 ->
# 54 "lexer.mll"
             ( EOF )
# 273 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

and read_string buf lexbuf =
   __ocaml_lex_read_string_rec buf lexbuf 54
and __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 57 "lexer.mll"
              ( STRING (Buffer.contents buf) )
# 285 "lexer.ml"

  | 1 ->
# 58 "lexer.mll"
              ( Buffer.add_char buf '/'; read_string buf lexbuf )
# 290 "lexer.ml"

  | 2 ->
# 59 "lexer.mll"
              ( Buffer.add_char buf '\\'; read_string buf lexbuf )
# 295 "lexer.ml"

  | 3 ->
# 60 "lexer.mll"
              ( Buffer.add_char buf '\b'; read_string buf lexbuf )
# 300 "lexer.ml"

  | 4 ->
# 61 "lexer.mll"
              ( Buffer.add_char buf '\012'; read_string buf lexbuf )
# 305 "lexer.ml"

  | 5 ->
# 62 "lexer.mll"
              ( Buffer.add_char buf '\n'; read_string buf lexbuf )
# 310 "lexer.ml"

  | 6 ->
# 63 "lexer.mll"
              ( Buffer.add_char buf '\r'; read_string buf lexbuf )
# 315 "lexer.ml"

  | 7 ->
# 64 "lexer.mll"
              ( Buffer.add_char buf '\t'; read_string buf lexbuf )
# 320 "lexer.ml"

  | 8 ->
# 66 "lexer.mll"
    (
      let lxm = (Lexing.lexeme lexbuf) in
      for i = 0 to String.length lxm - 1 do
        if lxm.[i] = '\n' then incr_lineno lexbuf
      done;
      Buffer.add_string buf lxm;
      read_string buf lexbuf
    )
# 332 "lexer.ml"

  | 9 ->
# 74 "lexer.mll"
      ( raise (SyntaxError ("Illegal string character: " ^ Lexing.lexeme lexbuf)) )
# 337 "lexer.ml"

  | 10 ->
# 75 "lexer.mll"
        ( raise (SyntaxError ("String is not terminated")) )
# 342 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state

;;

