open Hybrid_ir
open Printf

(* let make_c_header =
  (* Copy the first 23 lines from ../example-c-implementation/c-skeletons-for-SDF.c *)
  let ic = open_in "../example-c-implementation/c-skeletons-for-SDF.c" in
  let rec read_lines acc remaining_lines =
    if remaining_lines <= 0 then
      String.concat "\n" (List.rev acc)
    else
      try
        let line = input_line ic in
        read_lines (line :: acc) (remaining_lines - 1)
      with End_of_file ->
        String.concat "\n" (List.rev acc)
  in
  let content = read_lines [] 23 in
  close_in ic;
  content *)

let make_c_header = 
  "#include \"c-skeletons-for-SDF.c\"\n\n"

let make_c_footer = "\treturn 0;\n}"

let rec pprint_value_list = function
  | [] -> ""
  | Ast.Value(s)::[] -> String.sub s 0 1
  | Ast.Value(s)::tl -> (String.sub s 0 1) ^ "," ^ pprint_value_list tl

let rec pprint_inlined_code = function
  | [] -> ""
  | Ast.Value(s)::[] -> s
  | Ast.Value(s)::tl -> s ^ "," ^ pprint_inlined_code tl

let rec pprint_string_list = function
  | [] -> ""
  | [s] -> "&" ^ s
  | s::tl -> "&" ^ s ^ ", " ^ pprint_string_list tl

let rec pprint_input_list n = function
  | [] -> ""
  | [s] -> "token* in" ^ string_of_int n
  | s::tl -> "token* in" ^ string_of_int n ^ ", " ^ pprint_input_list (n+1) tl

let rec pprint_output_list n = function
  | [] -> ""
  | [s] -> "token* out" ^ string_of_int n
  | s::tl -> "token* out" ^ string_of_int n ^ ", " ^ pprint_output_list (n+1) tl
  
let rec make_c_actors identified_functions actor_calls buffer_creations = function
  | [] -> (identified_functions, actor_calls, buffer_creations)
  | IRSDFActor(name, attrl, signall, paraml, ir_IO_nr)::tl ->
    (
    match ir_IO_nr with
    | IRActorIOnr(i, o, prod_no_tokens_list, cons_no_tokens_list, prod_signals_list, cons_signals_list, inlined_code) ->
      make_c_actors 
      (identified_functions ^ "\n/* Function " ^ name ^ " */\n" ^ "void f_" ^ name ^ "(" ^ pprint_input_list 1 cons_signals_list ^ ", " ^ pprint_output_list 1 prod_signals_list ^ "){\n" ^ "\t" ^ pprint_inlined_code inlined_code ^ "\n}\n")
      (actor_calls ^ "\n\t/* Actor " ^ name ^ " */\n\t" ^ "actor" ^ string_of_int i ^ string_of_int o ^ "SDF(" ^ pprint_value_list cons_no_tokens_list ^ ", " ^ pprint_value_list prod_no_tokens_list ^ ", " ^ pprint_string_list cons_signals_list ^ ", " ^ pprint_string_list prod_signals_list ^ ", f_" ^ name ^ ");\n") 
      buffer_creations tl
    | _ -> failwith "make_c_actors: IRActorIOnr expected"
    )
    (* let rec make_func_parameters = function
      | [] -> ""
      | IRParamNode("consumption", valuel)::tl ->
        List.map (fun Ast.ParamLeaf(name, [Value(s)]) -> s ^ ", ") valuel
      | IRParamNode("production", valuel)::tl ->
        List.map (fun IRParamLeaf(name, Value(s)) -> s ^ ", ") valuel
      | _::tl -> make_func_parameters tl
    in
    make_func_parameters paraml *)
  
  | IRSDFChannel(name, attrl, signall, paraml)::tl -> 
    (* Sample
      token* buffer_s_in = malloc(2 * sizeof(token));
      channel s_in = createFIFO(buffer_s_in, 2);
    *)
    let size = 2 in (* NOTE: FIXME: hardcoded *)
    let sigName = String.sub name 0 (String.length name - 3) in
    let rec string_repeat s n =
      if n = 0 then
        ""
      else
        s ^ string_repeat s (n - 1)
    in
    let rec print_initial_tokens = function
    | Ast.ParamLeaf("numOfInitialTokens", value)::tl -> 
      let num_initial_tokens =
        match value with
        | Ast.Value(s)::[] -> int_of_string (String.sub s 0 1)
        | _ -> failwith "make_c_actors: IRParamLeaf: Value expected"
      in
      if num_initial_tokens > 0 then
        "\t/*Initial tokens for " ^ sigName ^ "*/\n" ^ string_repeat ("\twriteToken(" ^ sigName ^ ", " ^ "0" ^ ");\n") num_initial_tokens ^ print_initial_tokens tl
      else
        print_initial_tokens tl
    | _::tl -> print_initial_tokens tl
    | [] -> ""
  in
  make_c_actors identified_functions actor_calls (buffer_creations ^ "\n\t" ^ "token* buffer_" ^ sigName ^ " = malloc(" ^ string_of_int size ^ " * sizeof(token));\n\t" ^ "channel " ^ sigName ^ " = createFIFO(buffer_" ^ sigName ^ ", " ^ string_of_int size ^ ");\n" ^ print_initial_tokens paraml) tl


  | IRUnkownVertex(name, attrl, signall, paraml)::tl ->
    make_c_actors identified_functions actor_calls buffer_creations tl


(* let make_c_code = function
  | IRSystemgraph(vl, el) ->
    printf "/* Code generated by the ForSyDe compiler */\n";
    print_endline make_c_header;
    let (actor_calls, buffer_creations) = make_c_actors "" "" vl
    in
    print_endline buffer_creations;
    print_endline actor_calls; *)

let make_c_code = function
  | IRSystemgraph(vl, el) ->
    let oc = open_out "../example-c-implementation/output.c" in
    fprintf oc "/* Code generated by the ForSyDe compiler */\n";
    fprintf oc "%s" make_c_header;
    let (identified_functions, actor_calls, buffer_creations) = make_c_actors "" "" "" vl in
    fprintf oc "%s" identified_functions;
    fprintf oc "%s" "\nint main(){\n";
    fprintf oc "%s" buffer_creations;
    fprintf oc "%s" actor_calls;
    fprintf oc "%s" make_c_footer;
    close_out oc  